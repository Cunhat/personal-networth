// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime?

  sessions   Session[]
  accounts   Account[]
  categories Category[]
  balance    Balance[]
  tag        Tag[]
  widget     Widget[]
  PieChart   PieChart[]
  Expense    Expense[]

  @@map(name: "users")
}

model Account {
  id         String    @id @default(cuid())
  name       String    @unique
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance    Balance[]

  tags AccountsOnTags[]

  @@index([categoryId])
  @@index([userId])
  @@map(name: "accounts")
}

model Balance {
  id        String   @id @default(cuid())
  balance   Float
  accountId String
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime

  @@index([accountId])
  @@index([userId])
}

model Category {
  id   String @id @default(cuid())
  name String
  type String

  userId  String
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  account Account[]

  @@index([userId])
  @@map(name: "categories")
}

model Tag {
  id              String            @id @default(cuid())
  name            String
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  accounts        AccountsOnTags[]
  widgetsOnTags   WidgetsOnTags[]
  PieChartsOnTags PieChartsOnTags[]

  @@index([userId])
  @@map(name: "tags")
}

model AccountsOnTags {
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String
  account    Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([tagId, accountId])
  @@index([tagId])
  @@index([accountId])
}

model Widget {
  id            String          @id @default(cuid())
  title         String
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  widgetsOnTags WidgetsOnTags[]

  @@index([userId])
  @@map(name: "widget")
}

model WidgetsOnTags {
  widgetId String
  widget   Widget @relation(fields: [widgetId], references: [id])
  tagId    String
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@id([widgetId, tagId])
  @@index([widgetId])
  @@index([tagId])
}

model PieChart {
  id              String            @id @default(cuid())
  title           String
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  pieChartsOnTags PieChartsOnTags[]

  @@index([userId])
  @@map(name: "pie_chart")
}

model PieChartsOnTags {
  pieChartId String
  pieChart   PieChart @relation(fields: [pieChartId], references: [id])
  tagId      String
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([pieChartId, tagId])
  @@index([pieChartId])
  @@index([tagId])
}

model Expense {
  id                  String   @id @default(cuid())
  name                String
  amount              Float
  firstOccurrence     DateTime
  numberOfOccurrences Int

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
